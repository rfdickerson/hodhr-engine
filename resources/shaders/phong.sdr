phong

//vertex

#version 330 core

layout (location = 0) in vec3 VertexPosition;
layout (location = 1) in vec3 VertexNormal;
layout (location = 2) in vec3 VertexTangents;
layout (location = 3) in vec3 VertexBittangents;
layout (location = 4) in vec2 TextureCoords;
layout (location = 5) in vec3 VertexColor;

out vec3 Position;
out vec3 Normal;
out vec3 Tangent;
out vec3 BitTangent;
out vec2 texCoords;
out vec3 Color;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 MVP;
uniform float ScaleFactor;

const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

const vec3 L00 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L1m1 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L10 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L11 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L2m2 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L2m1 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L20 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L21 = vec3( 0.871297, 0.875222, 0.864470);
const vec3 L22 = vec3( 0.871297, 0.875222, 0.864470);

struct LightInfo {
    vec4 Position;   // Light position in eye coords
    vec3 La;	        // Ambient light intensity
    vec3 Ld;         // Diffuse light intensity
    vec3 Ls;	        // Specular light intensity
};
uniform LightInfo Light;

out vec3 DiffuseColor;

void main()
{
	Normal = normalize( NormalMatrix * VertexNormal);
	Tangent = normalize( NormalMatrix * vec3(  vec4(VertexTangents,1.0)));
	BitTangent = vec3(NormalMatrix * vec3( vec4(VertexBittangents,1.0)));
	Position = vec3(ModelViewMatrix * vec4(VertexPosition,1.0));

	mat3 TBN = transpose(mat3(
		Tangent,
		BitTangent,
		Normal));


	vec3 s = normalize( vec3(Light.Position) - Position);

	LightDirection_tangentspace = TBN * s;
	EyeDirection_tangentspace = TBN * vec3(1,0,0);

	gl_Position = MVP * vec4(VertexPosition, 1.0);
	texCoords = TextureCoords;

	DiffuseColor = C1 * L22 * (Normal.x * Normal.x - Normal.y * Normal.y) +
		C3 * L20 * Normal.z * Normal.z +
		C4 * L00 -
		C5 * L20 +
		2.0 * C1 * L2m2 * Normal.x * Normal.y +
		2.0 * C1 * L21 * Normal.x * Normal.z +
		2.0 * C1 * L2m1 * Normal.y * Normal.z +
		2.0 * C2 * L11 * Normal.x +
		2.0 * C2 * L1m1 * Normal.y +
		2.0 * C2 * L10 * Normal.z;

	DiffuseColor *= ScaleFactor;

	Color = VertexColor;

}


//fragment

#version 330 core

in vec3 Position;
in vec3 Normal;
in vec2 texCoords;
in vec3 DiffuseColor;
in vec3 Color;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;


layout (location = 0) out vec4 FragColor;


struct LightInfo {
    vec4 Position;   // Light position in eye coords
    vec3 La;	        // Ambient light intensity
    vec3 Ld;         // Diffuse light intensity
    vec3 Ls;	        // Specular light intensity
};
uniform LightInfo Light;

struct MaterialInfo {
       vec3 Ka;		// Ambient reflectivity
       vec3 Kd;		// Diffuse reflectivity
       vec3 Ks;		// Specular reflectivity
       float Shininess;	// Specular shininess factor
};
uniform MaterialInfo Material;

uniform sampler2D diffuseTex;
uniform sampler2D normalTex;

vec3 ads()
{
	vec3 textureNormal_tangentspace = normalize(texture( normalTex, texCoords).rgb*2.0 - 1.0);

	float intensity = clamp(dot(LightDirection_tangentspace, textureNormal_tangentspace), 0,1);

   vec3 n = normalize( Normal );
   vec3 s = normalize( vec3(Light.Position) - Position);
   vec3 v = normalize( vec3(-Position));
   vec3 h = normalize( v + s);

   vec3 r = reflect( -s, n);
	/*
   return Light.Ld *
        (Material.Ka +
         Material.Kd * max( dot(s, Normal), 0.0) +
         Material.Ks * pow( max( dot(h,n), 0.0), Material.Shininess));
*/
	// return Material.Kd * intensity;
	return Material.Kd * clamp( dot( LightDirection_tangentspace, textureNormal_tangentspace), 0.0, 1.0);
}

void main() {

	//FragColor = vec4(Color,1.0);
   	FragColor += vec4(ads(), 1.0);

	FragColor *= texture(diffuseTex, texCoords);
	//FragColor = vec4(texCoords, 1, 1);

	FragColor += vec4(DiffuseColor,1.0);

  // FragColor = vec4(Normal, 1.0);
  // FragColor *= texture2D(diffuseTex, texCoords);
  // FragColor = vec4(1,0,0,1);

}
